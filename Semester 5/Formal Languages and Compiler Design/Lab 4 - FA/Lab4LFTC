Documentation 

A finite automaton (FA) is a computational model used to recognize patterns within input sequences. It consists of a finite set of states, an alphabet of symbols, an initial state, and transition rules. The FA class models a finite automaton by all mentioned from a file. It displays these elements, verifies determinism, checks word acceptance, and finds accepted substrings in deterministic finite automata.

Operations:
-FA(String fileName): Initializes FA and reads data from file
-readFromFile(): Reads and parses FA elements from the input file
-printListOfString(String listName, List<String> list): Prints a list with a specified label
-printStates(): Prints the set of FA states
-printAlphabet(): Prints the alphabet used by the FA
-printOutputStates(): Prints the final states of the FA
-printInitialState(): Prints the initial state of the FA
-printTransitions(): Prints all transitions of the FA
-checkAcceptedWord(String word): Checks if a word is accepted by the FA
-getNextAccepted(String word): Finds the longest accepted prefix of a word
-isDeterministic(): Verifies that the FA is deterministic

BNF format: 
<file> ::= <states> "\n" <alphabet> "\n" <initial_state> "\n" <final_states> "\n" <transitions>

<states> ::= "states=" <state> { "," <state> }
<alphabet> ::= "alphabet=" <symbol> { "," <symbol> }
<initial_state> ::= "initial state=" <state>
<final_states> ::= "final state=" <state> { "," <state> }
<transitions> ::= "transitions=" <transition> { "," <transition> }

<state> ::= <non_empty_string> 
<symbol> ::= <non_empty_string>
<transition> ::= <state> " " <state> " " <symbol>
<state> ::= <letter> <letter-or-digit>*
 <letter> ::= "a" | "b" | "c" | ... | "z" 
<digit> ::= "0" | "1" | "2" | ... | "9" 
<letter-or-digit> ::= <letter> | <digit>

